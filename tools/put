#!/usr/bin/env ruby

require 'optparse'
require 'time'

Struct.new('Config', :server, :silo)

def parse_command args
  conf = Struct::Config.new

  opts   = OptionParser.new do |opt|
    opt.on("--server hostname",  String, "webserver name, e.g. 'storage.local'") do |server|
      conf.server = server
    end
    opt.on("--silo name",  String, "silo name, e.g. '001'") do |silo|
      conf.silo = silo
    end
  end
  opts.parse!(args)
  raise "no server specified." unless conf.server
  raise "no silo specified." unless conf.silo
rescue => e
  STDERR.puts "Error in command line options: #{e.message}\n#{opts}"
  exit
else
  return conf
end


def ieid

  range = 26 ** 6
  sleep (60.0 * 60.0 * 24.0) / range   # make sure we're unique, and we pause

  now  = Time.now
  mid  = Time.mktime(now.year.to_s, now.month.to_s, now.day.to_s)
  point_in_day  = ((now.to_i - mid.to_i) + now.usec/1_000_000.0) / 86400.0  # fraction of day to microsecond resolution
  point_in_ieid = (point_in_day * range).to_i    # fraction of day in fixed point, base 26: 'AAAAAA' .. 'ZZZZZZ'

  # horner's algorithm on point_in_ieid

  letters = ('A'..'Z').to_a
  frac = ''
  6.times do |i|
    point_in_ieid, rem = point_in_ieid / 26, point_in_ieid % 26
    frac += letters[rem]
  end
  sprintf('E%04d%02d%02d_%s', now.year, now.month, now.day, frac.reverse)
end


conf = parse_command ARGV

ARGV.each do |filename|
  md5 = `md5-base64 #{filename}`.chomp
  id = ieid()
  cmd = "curl -sv -X PUT -H 'Content-MD5: #{md5}' --upload-file #{filename} http://#{conf.server}/#{conf.silo}/data/#{id} 2>&1"
  puts cmd
  puts cmd.gsub(/./, '=')
  puts `#{cmd}`
  puts ''
  puts ''
end
