#!/usr/bin/env ruby

require 'digest/md5'
require 'digest/sha1'
require 'enumerator'
require 'fileutils'
require 'find'
require 'net/smtp'
require 'optparse'
require 'tempfile'
require 'time'

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../composite-tape-disk/lib'))

require 'store/db'
require 'store/logger'
require 'store/silo'
require 'store/streams'
require 'store/tsmexecutor'

$LOAD_PATH.unshift File.dirname(__FILE__)

require 'fixity_utils'



# get_options args
#

Struct.new('Options', :db_config_file, :db_config_key, :silo, :web_server)
           

def get_options args

  conf = Struct::Options.new

  # defaults:

  conf.db_config_file = '/opt/fda/etc/db.yml'
  conf.db_config_key  = 'silo_test'
  conf.web_server     = case Socket::gethostname.downcase
                        when 'fclnx30.fcla.edu'; 'silos.darchive.fcla.edu'
                        when 'fclnx31.fcla.edu'; 'silos.tarchive.fcla.edu'
                        end

  opts = OptionParser.new do |opts|

    str = "The name of the web server using this silo"

    opts.on("--web-server HOST",  String, (conf.web_server ? str + " (defaults to " + conf.web_server + ")." : str + ", required.")) do |host|
      conf.web_server = host
    end

    opts.on("--db-config-file FILEPATH", String, "Filename of database configuration data (defaults to #{conf.db_config_file}).") do |filepath|
      conf.db_config_file = filepath
      if not File.exists? filepath
        raise "#{conf.db_config_file} doesn't exist."
      end
      if not File.readable? filepath
        raise "#{conf.db_config_file} isn't readable."
      end
    end

    opts.on("--db-config-key KEY", String, "The key into the file of database configuration data (defaults to #{conf.db_config_key}).") do |key|
      conf.db_config_key = key
    end    

    opts.on("--silo PATH", String, "The name of the silo, required.") do |path|
      conf.silo = path
    end
  end

  opts.parse!(args) 
  raise "No web server name specified."  unless conf.web_server
  raise "No silo specified."             unless conf.silo
  
rescue => e
  STDERR.puts e, opts
  exit
else
  return conf
end

options = get_options ARGV

Store::DB.setup(options.db_config_file, options.db_config_key)

class DbStream  < ArrayBasedStream
  def initialize host, dir
    @index = 0
    @list  = []
    silo_record = Store::DB::SiloRecord.lookup(host, dir)
    Store::DB::PackageRecord.list(silo_record).each { |rec| @list.push [ rec.name, rec.extant ] }
    @list.sort! { |a, b| a[0].downcase <=> b[0].downcase }
  end
end


DbStream.new(options.web_server, options.silo).get do |key, val|
  puts "#{key} #{val}"
end
