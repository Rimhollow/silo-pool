#!/usr/bin/env ruby
# -*- mode: ruby; -*-

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'optparse'
require 'ostruct'
require 'store/db'
require 'store/pool'

def parse_command_line args
  conf = OpenStruct.new(:file => nil, :key => nil, :clear => false, :username => nil, :password => nil)
  opts = OptionParser.new do |opts|
    opts.on("--clear", "Clear the admin account from the database (so no password is required)") do 
      conf.clear = true
    end
    opts.on("--password NAME", String, "Set a new password for the admin account") do |password|
      conf.password = password
    end
    opts.on("--file DB_CONFIG_FILE",  String, "The database configuration filename for this service") do |filename|
      conf.file = filename
    end
    opts.on("--key DB_CONFIG_KEY",  String, "The key in the database configuration file for this service") do |key|
      conf.key = key
    end
  end
  opts.parse!(args)
  raise "No key to the DB configuration file provided"        unless conf.key
  raise "No filename for the DB configuration file provided"  unless conf.file
  raise "Configuration yaml file #{conf.file} not found"      unless File.exists? conf.file
  raise "Configuration yaml file #{conf.file} not readable"   unless File.readable? conf.file

  raise "Only one of --password or --clear can be used"       if conf.password and conf.clear
  raise "One of --password or --clear must be specfied"       if not conf.password and not conf.clear

rescue => e
  STDERR.puts e, opts
  exit
else
  return conf
end

include Store

conf = parse_command_line ARGV
DB.setup(conf.file, conf.key)

if conf.clear
  DB::Authentication.clear
  exit
end

if admin = DB::Authentication.lookup('admin')
  admin.password = conf.password
else
  DB::Authentication.create('admin', conf.password)
end

