#!/usr/bin/env ruby

# We need to update our on-disk silos to include sha1 files and the
# correct type (tar files) prior to migration to tape-based systems.
# This program does that. Circa spring 2010.

require 'store/silo'
require 'digest/md5'
require 'digest/sha1'
require 'fileutils'

RESTRICTIVE_FILE_PERMISSIONS      = 0444
PERMISSIVE_FILE_PERMISSIONS       = 0644
RESTRICTIVE_DIRECTORY_PERMISSIONS = 0555     
PERMISSIVE_DIRECTORY_PERMISSIONS  = 0755     

# Trundle through the file system and update the sha1 and type files.

def do_update root
  silo = Store::Silo.new(root)

  silo.each do |name|

    if silo.type(name) != 'application/x-tar'
      File.chmod(PERMISSIVE_DIRECTORY_PERMISSIONS, silo.path(name))
      File.chmod(PERMISSIVE_FILE_PERMISSIONS, silo.type_path(name))
      silo.write_lock(name) do
        open(silo.type_path(name), "w") do |io| 
          io.puts 'application/x-tar'
        end
      end     
      File.chmod(RESTRICTIVE_FILE_PERMISSIONS, silo.type_path(name))
      File.chmod(RESTRICTIVE_DIRECTORY_PERMISSIONS, silo.path(name))
    end

    if File.exists? silo.sha1_path(name)
      STDERR.puts "Warning for #{silo.filesystem}:#{name} - sha1 already exists, skipping."
      next
    end

    md5  = Digest::MD5.new
    sha1 = Digest::SHA1.new

    silo.get(name) do |buff|
      md5  << buff
      sha1 << buff
    end

    if md5.hexdigest != silo.md5(name)
      STDERR.puts "Error for #{silo.filesystem}:#{name} - computed md5 was #{md5.hexdigest}, but recorded one was #{silo.md5(name)}."
    else
      File.chmod(PERMISSIVE_DIRECTORY_PERMISSIONS, silo.path(name))
      silo.write_lock(name) do
        open(silo.sha1_path(name), "w") do |io| 
          io.puts sha1.hexdigest
        end
      end
      File.chmod(RESTRICTIVE_FILE_PERMISSIONS, silo.sha1_path(name))
      File.chmod(RESTRICTIVE_DIRECTORY_PERMISSIONS, silo.path(name))
    end
  end
end


ARGV.each do |path|
  if not File.directory? path
    STDERR.puts "#{path} is not a directory, skipping."
  elsif not File.writable? path
    STDERR.puts "Directory #{path} is not writable, skipping."
  else
    do_update(path)
  end
end
