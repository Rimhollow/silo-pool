#!/usr/bin/env ruby

# TODO:  print out all configuration information in log

$LOAD_PATH.unshift      File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

# This program trundles through one or more disk-based silos and does md5 and sha1 checksums,
# adding them to the SiloDB/SiloTape  database.

# TODO: extend DB to allow recording current size, as well

require 'datyl/config'
require 'datyl/logger'
require 'datyl/reporter'
require 'digest/md5'
require 'digest/sha1'
require 'optparse'
require 'store/exceptions'
require 'store/silodb'
require 'store/utils'


def get_config
  raise Store::ConfigurationError, "No DAITSS_CONFIG environment variable has been set, so there's no configuration file to read"             unless ENV['DAITSS_CONFIG']
  raise Store::ConfigurationError, "The DAITSS_CONFIG environment variable points to a non-existant file, (#{ENV['DAITSS_CONFIG']})"          unless File.exists? ENV['DAITSS_CONFIG']
  raise Store::ConfigurationError, "The DAITSS_CONFIG environment variable points to a directory instead of a file (#{ENV['DAITSS_CONFIG']})"     if File.directory? ENV['DAITSS_CONFIG']
  raise Store::ConfigurationError, "The DAITSS_CONFIG environment variable points to an unreadable file (#{ENV['DAITSS_CONFIG']})"            unless File.readable? ENV['DAITSS_CONFIG']
  
  config = Datyl::Config.new(ENV['DAITSS_CONFIG'], 'defaults', 'database', 'disk-fixity')

  raise Store::ConfigurationError, "The daitss configuration file #{ENV['DAITSS_CONFIG']} did not set the 'hostname' option" unless config.hostname

  return config
end


# setup(config) initializes logging and reporting, connects to the database, sets up signal handlers, and writes a process id to a run-file, if so configured.

def setup config

  $0 = 'disk-fixity'

  Datyl::Logger.setup('DiskFixity', config.hostname)


  if not (config.log_filename or config.log_syslog_facility)
    Datyl::Logger.stderr
  end

  Datyl::Logger.facility = config.log_syslog_facility  if config.log_syslog_facility
  Datyl::Logger.filename = config.log_filename         if config.log_filename

  if config.pid_directory
    pid_path = StoreUtils.pid_file(config.pid_directory)
    raise "PID file #{pid_path} exists. This indicates another copy of this program is running or has previously crashed; exiting"   if File.exists? pid_path
    File.open(pid_path, 'w') { |file|  file.puts $$ }
  end

  DataMapper::Logger.new(Datyl::Logger.new(:info, 'DataMapper:'), :debug) if config.log_database_queries

  begin
    Store::DB.setup config.silo_db
  rescue => e
    Datyl::Logger.err e.message
    exit
  end

  Kernel.trap('INT')  { Datyl::Logger.err "Interrupted"  ; exit }  # leaves the pid file, if one is being used
  Kernel.trap('HUP')  { teardown(config); exit }             # do a clean shutdown with these:
  Kernel.trap('PIPE') { teardown(config); exit } 

  Datyl::Reporter.max_lines_to_write = 2000    # each report will have at most these lines, though everything will go to syslog
  return Datyl::Reporter.new('Disk Fixity Checks')
end

# teardown will clear the run-file that xymon checks.  If we crash, xymon will let us know.

def teardown config
  if config.pid_directory
    pid_path = StoreUtils.pid_file(config.pid_directory)
    File.delete pid_path if File.exists? pid_path and File.writable? pid_path
  end
end

# Order the disk silos by oldest completed fixity time, latest first; if silos have been specified on the command line, restrict our list to just those.

def select_silos config, reporter
  silos = Store::DB::SiloRecord.list(config.hostname).select{ |s| not s.retired? and s.state == :disk_master }.map{ |rec| Store::SiloDB.new(rec.hostname, rec.filesystem) }
  candidates = ARGV.map { |s| s.sub(%r{/+$}, '') }
  silos = silos.select { |s| candidates.include? s.filesystem } unless candidates.empty?
  silos = silos.select { |s| s.oldest_fixity }.sort{ |a,b| a.oldest_fixity <=> b.oldest_fixity }
  return silos.sort { rand } if config.randomize
  return silos
rescue => e
  reporter.error "Failed selecting the list of silos to process:"
  reporter.error "#{e.class} #{e.message}, backtrace follows:"
  e.backtrace.each { |line| reporter.error "  #{line}" }
  reporter.write
  exit                 # skip teardown so we leave pid file - makes sure xymon will squawk
end

class Counter
  attr_accessor  :skipped, :errors, :ok, :total
  def initialize
    @skipped = @errors = @ok = @total = 0
  end
end
  
config   = get_config
reporter = setup(config)

reporter.info  "DiskFixity started at #{Time.now}"

silos    = select_silos(config, reporter)

if silos.empty?                                                   # TODO: prettier output here
  reporter.warn "There were no silos available to process for #{config.hostname}."
  reporter.warn "Configuration options: #{config.inspect}."
  reporter.warn "Silos specified on the command line: #{ARGV * ', '}." unless ARGV.empty?
else
  reporter.info "Checking the following silos for #{config.hostname} by last fixity check date:" 
  silos.each { |silo| reporter.info "  * #{silo.filesystem} - #{silo.oldest_fixity.strftime('%A, %B %d, %Y at %r')}" }
  reporter.info "Will skip packages if checked within #{config.fresh_enough} days." if config.fresh_enough and config.fresh_enough > 0   # TODO plural check, commify
end

silos.each do |silo|
  reporter.info
  reporter.info "Beginning bulk fixity update for silo #{silo.filesystem}"
  reporter.info DateTime.now.strftime("Starting silo  #{silo.filesystem} on %A, %B %d, %Y at %r")
  counter = Counter.new  

  silo.each_package_record do |package|
    counter.total += 1
    if (package.initial_timestamp != package.latest_timestamp) and (DateTime.now - package.latest_timestamp) <  config.fresh_enough 
      counter.skipped += 1
      next
    end
    begin
      md5  = Digest::MD5.new
      sha1 = Digest::SHA1.new
      silo.get(package.name) do |buff|
        md5  << buff
        sha1 << buff
      end
      md5   = md5.hexdigest
      sha1  = sha1.hexdigest
    rescue => e    
      reporter.err "Unexpected error checking #{package.name} on silo #{silo.filesystem}:"
      reporter.err "  #{e.class}: #{e.message}"
      counter.errors += 1
    else
      silo.fixity(package.name, :md5 => md5, :sha1 => sha1)
      errors = []
      errors.push "md5 mismatch - expected #{silo.md5(package.name)} but got #{md5}"    if (md5  != silo.md5(package.name))
      errors.push "sha1 mismatch - expected #{silo.sha1(package.name)} but got #{sha1}" if (sha1 != silo.sha1(package.name))
      if errors.empty?
        counter.ok += 1
      else
        counter.errors += 1
        reporter.err "Fixity failure for #{package.name} on silo #{silo.filesystem}:"
        errors.each { |line|  reporter.err "  #{line}" }
      end
    end
  end  
  reporter.info DateTime.now.strftime("Completed silo #{silo.filesystem} on %A, %B %d, %Y at %r")
  reporter.info "Total of #{counter.total} packages: #{counter.skipped} skipped, #{counter.ok} succeeded, #{counter.errors} failed"  # TODO: commify, pluralize
  reporter.info 
end

reporter.info  "DiskFixity finished at #{Time.now}"

reporter.write
teardown(config)
